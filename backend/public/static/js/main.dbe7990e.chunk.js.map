{"version":3,"sources":["contexts/CompanyContext.js","services/httpService.js","services/companyService.js","pages/Home.js","services/employeeService.js","cmps/BoardEmployeePreview.js","cmps/BoardEmployeeList.js","pages/Board.js","pages/LoginSignup.js","services/cloudinaryService.js","cmps/NewEmployeePopup.js","cmps/EmployeePreview.js","cmps/EmployeesList.js","pages/CompanyProfile.js","cmps/Header.js","App.js","serviceWorker.js","index.js","config/index.js","config/dev.js","config/prod.js","config sync /^/.*$"],"names":["CompanyContext","createContext","baseURL","require","API_URL","axios","Axios","create","withCredentials","endpoint","data","ajax","a","async","method","url","res","console","log","dir","response","status","window","location","assign","loginCompany","loginCred","httpService","company","_handleLoginCompany","logoutCompany","Cookies","remove","sessionStorage","clear","signupCompany","signupCred","getCompanies","getCompanyById","companyId","removeCompany","updateCompany","companyObj","_id","setItem","JSON","stringify","Home","props","useContext","loggedCompany","history","useHistory","className","onClick","push","companyService","comps","getAllEmployees","getEmployeeById","employeeId","removeEmployee","updateEmployee","employeeObj","addEmployee","getAllEmployeesInCompany","updateEmployeePresence","isPresence","BoardEmployeePreview","emp","onChangePresence","useState","isLoading","setIsLoading","id","width","height","firstName","lastName","src","image","alt","join","BoardEmployeeList","employees","map","key","socket","io","Board","setLoggedCompany","setEmployees","isDataChanged","setIsDataChanged","useEffect","employeeService","getEmployees","emit","on","document","getElementById","classList","toggle","refreshBoard","logo","setTimeout","LoginSignup","signupButton","useRef","companies","setCompanies","password","setLogin","companyName","setSignup","signUpButton","signInButton","container","addEventListener","add","URLSearchParams","search","get","current","click","companiesMap","forEach","label","name","value","signupHandleChange","ev","persist","field","target","prevSignup","action","onSubmit","preventDefault","onChange","type","placeholder","options","values","chosenCompany","prevLogin","onSelectCompany","ref","uploadImg","UPLOAD_URL","formData","FormData","append","files","fetch","body","json","secure_url","NewEmployeePopup","empForm","setForm","isUploading","setIsUploading","handleChange","e","prevForm","primaryImgUrl","setPrimaryUrl","handleClose","employee","minLength","required","hidden","disabled","EmployeePreview","EmployeesList","cellPadding","cellSpacing","border","CompanyProfile","isNewEmpOpen","setIsNewEmpOpen","toggleNewEmployee","Header","to","activeClassName","exact","App","jsonStr","slice","parse","Provider","path","component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","envConfig","environment","err","code","Error","tryRequire","process","ENVIRONMENT","module","exports","webpackContext","req","webpackContextResolve","__webpack_require__","o","keys","Object","resolve"],"mappings":"4MAEaA,EAAiBC,wBAAc,M,iCCDpCC,EAAYC,EAAQ,IAApBD,QAGFE,EAAO,UAAMF,EAAN,SACPG,EAAQC,IAAMC,OAAO,CACvBC,iBAAiB,IAON,WACPC,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,IAFtB,WAIND,EAAUC,GACX,OAAOC,EAAKF,EAAU,OAAQC,IALvB,WAOPD,EAAUC,GACV,OAAOC,EAAKF,EAAU,MAAOC,IARtB,WAUJD,EAAUC,GACb,OAAOC,EAAKF,EAAU,SAAUC,IAIxC,SAAeC,EAAKF,GAApB,+BAAAG,EAAAC,OAAA,uDAA8BC,EAA9B,+BAAuC,MAAOJ,EAA9C,+BAAqD,KAArD,oBAAAE,EAAA,MAE0BP,EAAM,CACpBU,IAAI,GAAD,OAAKX,GAAL,OAAeK,GAClBK,SACAJ,UALZ,cAEcM,EAFd,yBAOeA,EAAIN,MAPnB,mCAUQO,QAAQC,IAAR,qBAA0BJ,EAA1B,yCAAiEV,GAAjE,OAA2EK,EAA3E,wBAAmGC,IACnGO,QAAQE,IAAR,OACI,KAAIC,UAAoC,MAAxB,KAAIA,SAASC,OAZzC,iBAaYC,OAAOC,SAASC,OAAO,YAbnC,2F,qBCzBe,GACXC,aAwBJ,SAA4BC,GAA5B,eAAAd,EAAAC,OAAA,kEAAAD,EAAA,MAC0Be,EAAiB,aAAcD,IADzD,cACUE,EADV,yBAEWC,EAAoBD,IAF/B,sCAvBIE,cA+BJ,oBAAAlB,EAAAC,OAAA,kEAAAD,EAAA,MACUe,EAAiB,gBAD3B,OAEII,IAAQC,OAAO,iBACfC,eAAeC,QAHnB,sCA9BIC,cA0BJ,SAA6BC,GAA7B,eAAAxB,EAAAC,OAAA,kEAAAD,EAAA,MAC0Be,EAAiB,cAAeS,IAD1D,cACUR,EADV,yBAEWC,EAAoBD,IAF/B,sCAzBIS,aAMJ,WACI,OAAOV,EAAgB,YANvBW,eASJ,SAAwBC,GACpB,OAAOZ,EAAA,kBAA2BY,KATlCC,cAWJ,SAAuBD,GACnB,OAAOZ,EAAA,kBAA8BY,KAXrCE,cAcJ,SAAuBC,GACnB,OAAOf,EAAA,uBAAgCe,EAAWC,KAAOD,KAgB7D,SAASb,EAAoBD,GAEzB,OADAK,eAAeW,QAAQ,UAAWC,KAAKC,UAAUlB,IAC1CA,ECnCJ,IAAMmB,EAAO,SAACC,GACOC,qBAAWjD,GAA7BkD,cADsB,IAE1BC,EAAUC,cAcd,OACE,oCACE,6BACE,yDACA,uFAGF,yBAAKC,UAAU,iBACb,6BACE,2DACA,4BAAQC,QAjBA,WACdH,EAAQI,KAAK,YAgBP,gBAEF,6BACE,0DACA,4BAAQD,QAjBC,WACfH,EAAQI,KAAK,yBAgBP,mBAGJ,sCACA,4BAAQD,QA9BU,0BAAA1C,EAAAC,OAAA,kEAAAD,EAAA,MACA4C,EAAenB,gBADf,OACdoB,EADc,OAEpBxC,QAAQC,IAAIuC,GAFQ,uCA8BlB,cCvCS,GACXC,gBASJ,WACI,OAAO/B,EAAgB,aATvBgC,gBAgBJ,SAAyBC,GACrB,OAAOjC,EAAA,mBAA4BiC,KAhBnCC,eAkBJ,SAAwBD,GACpB,OAAOjC,EAAA,mBAA+BiC,KAlBtCE,eAqBJ,SAAwBC,GACpB,OAAOpC,EAAA,wBAAiCoC,EAAYpB,KAAOoB,IArB3DC,YA8BJ,SAA2BD,GAA3B,SAAAnD,EAAAC,OAAA,kEAAAD,EAAA,MACiBe,EAAiB,WAAYoC,IAD9C,8EA7BIE,yBAQJ,SAAkC1B,GAC9B,OAAOZ,EAAA,2BAAoCY,KAR3C2B,uBAsBJ,SAAgCN,EAAYO,GAExC,OADAlD,QAAQC,IAAI0C,EAAYO,GACjBxC,EAAA,oBAAsC,CAACiC,aAAYO,iB,qBC9BvD,SAASC,EAAT,GAA0D,IAA1BC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,iBAAoB,EAC1BC,oBAAS,GADiB,mBACrDC,EADqD,KAC1CC,EAD0C,KAW5D,OACI,6BAASC,GAAE,UAAKL,EAAI1B,IAAT,SAAqBU,UAAU,gBAAgBC,QAAS,kBARlCM,EAQ8DS,EAAI1B,IARzE,EAAA/B,EAAAC,OAAA,uDAE1BI,QAAQC,IAAI,SACZuD,GAAa,GAHa,WAAA7D,EAAA,MAIpB0D,EAAiBV,IAJG,OAK1Ba,GAAa,GALa,yCAAOb,IAS7B,yBAAKP,UAAU,gBAAgBmB,GAAa,kBAAC,IAAD,CAAUG,MAAM,QAAQC,OAAO,WAC3E,2BAAIP,EAAIQ,UAAY,IAAMR,EAAIS,UAC9B,yBAAKJ,GAAIL,EAAI1B,IAAKoC,IAAKV,EAAIW,MAAOC,IAAI,UAAU5B,UAAW,CAACgB,EAAIF,WAAa,QAAU,OAAQ,qBAAqBe,KAAK,QCP9H,IAAMC,EAAoB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,UAAWd,EAAuB,EAAvBA,iBAC3C,OACI,oCACI,yBAAKjB,UAAU,iBACV+B,EAAUC,KAAI,SAAAhB,GAAG,OACd,kBAACD,EAAD,CAAsBE,iBAAmBA,EAAkBgB,IAAKjB,EAAI1B,IAAK0B,IAAKA,U,iBCNlG,IAGMnE,EAHSC,EAAQ,IAGAD,QAEjBqF,EAASC,IAAGtF,GAILuF,EAAQ,SAACzC,GACpB,IAAIG,EAAUC,cADgB,EAEcH,qBAAWjD,GAA/CkD,EAFsB,EAEtBA,cAAewC,EAFO,EAEPA,iBAFO,EAGInB,mBAAS,MAHb,mBAGvBa,EAHuB,KAGZO,EAHY,OAIYpB,oBAAS,GAJrB,mBAIvBqB,EAJuB,KAIRC,EAJQ,KAM9BC,qBAAU,YACa,mBAAAlF,EAAAC,OAAA,mDACdqC,EADc,mEAAAtC,EAAA,MAEDmF,EAAgB9B,yBAAyBf,EAAcwB,KAFtD,OAEb1D,EAFa,OAGnBC,QAAQC,IAAIF,EAAK,OACjB2E,EAAa3E,GAJM,qCAOrBgF,KACC,CAAC9C,EAAe0C,IAEnBE,qBAAU,WACH5C,GACLqC,EAAOU,KAAK,aAAc/C,EAAcwB,MACvC,CAACa,EAAQrC,IA2CZ,OAPA4C,qBAAU,WACRP,EAAOW,GAAG,gBAAgB,aAZP,wBAAAtF,EAAAC,OAAA,uDAAQ0B,EAAR,EAAQA,UAAWqB,EAAnB,EAAmBA,WACtC3C,QAAQC,IAAI,qBACZiF,SAASC,eAAT,UAA2BxC,IAAcyC,UAAUC,OAAO,QAFvC,WAAA1F,EAAA,MAICmF,EAAgB9B,yBAAyB1B,IAJ1C,OAIXvB,EAJW,OAKjBC,QAAQC,IAAIF,EAAK,OACjB2E,EAAa3E,GANI,qCAcfuF,CAAa,CAAChE,UAFqC,EAA3BA,UAECqB,WAF0B,EAAhBA,kBAIxC,CAAC2B,IAEGrC,EAEH,oCAAE,6BACA,4BAAQI,QA5CK,oBAAA1C,EAAAC,OAAA,kEAAAD,EAAA,MACT4C,EAAe1B,iBADN,OAEf4D,EAAiB,MACjBvC,EAAQI,KAAK,KAHE,uCA4Cb,WAEA,yBAAKF,UAAU,iBAAiB0B,IAAK7B,EAAcsD,OACnD,yBAAKnD,UAAU,mBACZ+B,EAAY,kBAAC,EAAD,CAAmBd,iBA3Cb,SAAOV,GAAP,eAAAhD,EAAAC,OAAA,uDACvBI,QAAQC,IAAI0C,GADW,SAGrBuC,SAASC,eAAT,UAA2BxC,IAAcyC,UAAUC,OAAO,QAHrC,WAAA1F,EAAA,MAIHmF,EAAgB7B,uBAAuBN,IAJpC,cAIf5C,EAJe,OAKrBC,QAAQC,IAAIF,GALS,WAAAJ,EAAA,MAOf2E,EAAOU,KAAK,eAAgB,CAAC1D,UAAWW,EAAcwB,GAAId,WAAYA,KAPvD,OAWrB6C,YAAW,kBAAIZ,GAAkBD,KAAgB,MAX5B,kDAcrB3E,QAAQC,IAAR,MAdqB,0DA2CiDkE,UAAWA,IAAgB,0CAP1E,4C,iCC1EhBsB,EAAc,SAAC1D,GAC1B,IAAIG,EAAUC,cADsB,EAEQH,qBAAWjD,GAA/CkD,EAF4B,EAE5BA,cAAewC,EAFa,EAEbA,iBACnBxC,GAAeC,EAAQI,KAAK,UAGhC,IAAMoD,EAAeC,iBAAO,MANQ,EAOFrC,mBAAS,MAPP,mBAO7BsC,EAP6B,KAOlBC,EAPkB,OASdvC,mBAAS,IATK,gCAUNA,mBAAS,CAAEhC,UAAW,GAAIwE,SAAU,MAV9B,mBAU7BrF,EAV6B,KAUlBsF,EAVkB,OAWJzC,mBAAS,CAAE0C,YAAa,GAAIF,SAAU,KAXlC,mBAW7B3E,EAX6B,KAWjB8E,EAXiB,KAapCpB,qBAAU,WACR,IAAMqB,EAAehB,SAASC,eAAe,UACvCgB,EAAejB,SAASC,eAAe,UACvCiB,EAAYlB,SAASC,eAAe,aAE1Ce,EAAaG,iBAAiB,SAAS,WACrCD,EAAUhB,UAAUkB,IAAI,yBAG1BH,EAAaE,iBAAiB,SAAS,WACrCD,EAAUhB,UAAUrE,OAAO,yBAGT,IAAIwF,gBAAgBxE,EAAMzB,SAASkG,QACvCC,IAAI,eAAef,EAAagB,QAAQC,UACvD,IAEH9B,qBAAU,YACY,qBAAAlF,EAAAC,OAAA,kEAAAD,EAAA,MACA4C,EAAenB,gBADf,OACZrB,EADY,OAEZ6G,EAAe,GACrB5G,QAAQC,IAAIF,GACZA,EAAI8G,SAAQ,SAAAlG,GACViG,EAAatE,KAAK,CAACwE,MAAOnG,EAAQoG,KAAMC,MAAOrG,EAAQe,SAEzDmE,EAAae,GAPK,qCASpBxF,KACC,IAEH,IAAM6F,EAAqB,SAACC,GAC1BA,EAAGC,UACH,IAAMC,EAAQF,EAAGG,OAAON,KAClBC,EAAQE,EAAGG,OAAOL,MACxBf,GAAU,SAAAqB,GAAU,sBAAUA,EAAV,eAAuBF,EAAQJ,QAqCrD,OACE,yBAAK5E,UAAU,qBACb,yBAAKA,UAAU,YAAYqB,GAAG,aAC5B,yBAAKrB,UAAU,oCACb,0BAAMmF,OAAO,IAAIC,SApBR,SAAMN,GAAN,mBAAAvH,EAAAC,OAAA,mDACfsH,EAAGO,iBACHzH,QAAQC,IAAI,SACL+F,EAAyB7E,EAAzB6E,YAAaF,EAAY3E,EAAZ2E,SAChBE,GAAgBF,EAJL,yCAIsB9F,QAAQC,IAAI,kBAJlC,yBAAAN,EAAA,MAKO4C,EAAerB,cAAc,CAAC6F,KAAMf,EAAaF,cALxD,OAKTnF,EALS,OAMf8D,EAAiB9D,GACjBX,QAAQC,IAAI,kBAPG,wCAqBP,8CACA,2DACA,2BAAO8G,KAAK,cAAcC,MAAO7F,EAAW6E,YAAa0B,SAAUT,EAAoBU,KAAK,OAAOC,YAAY,iBAC/G,2BAAOb,KAAK,WAAWC,MAAO7F,EAAW2E,SAAU4B,SAAUT,EAAoBU,KAAK,WAAWC,YAAY,aAC7G,6CAGJ,yBAAKxF,UAAU,oCACb,0BAAMmF,OAAO,IAAIC,SAxCT,SAAMN,GAAN,mBAAAvH,EAAAC,OAAA,mDACdsH,EAAGO,iBACFzH,QAAQC,IAAI,WACNqB,EAAuBb,EAAvBa,UAAWwE,EAAYrF,EAAZqF,SAClB9F,QAAQC,IAAIQ,GACRa,GAAcwE,EALJ,yCAKqB9F,QAAQC,IAAI,kBALjC,yBAAAN,EAAA,MAMQ4C,EAAe/B,aAAa,CAACc,UAAWA,EAAWwE,cAN3D,OAMRnF,EANQ,OAOd8D,EAAiB9D,GACjBX,QAAQC,IAAI,kBARE,wCAyCN,uCACA,yBAAKmC,UAAU,iBACf,kBAAC,IAAD,CACEyF,QAASjC,EACTkC,OAAQrH,EAAUE,QAClB+G,SAAU,SAACV,GAAD,OAxBE,SAACA,GACvB,IAAMe,EAAgBf,EAAM,GAC5BjB,GAAS,SAAAiC,GAAS,sBAAUA,EAAV,CAAqB1G,UAAWyG,EAAcf,WAsBjCiB,CAAgBjB,OAGvC,2BAAOD,KAAK,WAAWC,MAAOvG,EAAUqF,SAAU4B,SAzDlC,SAACR,GACzBA,EAAGC,UACH,IAAMC,EAAQF,EAAGG,OAAON,KAClBC,EAAQE,EAAGG,OAAOL,MACxBjB,GAAS,SAAAiC,GAAS,sBAAUA,EAAV,eAAsBZ,EAAQJ,OAChDhH,QAAQC,IAAIQ,IAoD2EkH,KAAK,WAAWC,YAAY,aAE3G,6CAGJ,yBAAKxF,UAAU,qBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,8BACb,6CACA,+DACA,4BAAQA,UAAU,QAAQqB,GAAG,UAA7B,YAEF,yBAAKrB,UAAU,+BACb,mDACA,qEACA,4BAAQ8F,IAAKxC,EAActD,UAAU,QAAQqB,GAAG,UAAhD,iBClIP,SAAe0E,EAAUjB,GAAzB,qBAAAvH,EAAAC,OAAA,sDACgB,YACbwI,EAFH,0CACgB,YADhB,iBAIGC,EAAW,IAAIC,UACZC,OAAO,OAAQrB,EAAGG,OAAOmB,MAAM,IACxCH,EAASE,OAAO,gBAAiB,iBAN9B,oBAAA5I,EAAA,MAQmB8I,MAAML,EAAY,CAChCvI,OAAQ,OACR6I,KAAML,KAVX,cAQOtI,EARP,mBAAAJ,EAAA,MAYoBI,EAAI4I,QAZxB,eAYOlJ,EAZP,OAaCO,QAAQC,IAAIR,GAbb,kBAcQA,EAAKmJ,YAdb,kCAgBC5I,QAAQC,IAAR,MAhBD,yDCKA,IAAM4I,EAAmB,SAAA9G,GAAU,IAAD,EACVuB,mBAAS,CAChCM,UAAW,GACXC,SAAU,KAHuB,mBAC9BiF,EAD8B,KACrBC,EADqB,OAOCzF,oBAAS,GAPV,mBAO9B0F,EAP8B,KAOjBC,EAPiB,KAS/BC,EAAe,SAAAC,GACjBA,EAAEhC,UACF,IAAME,EAAS8B,EAAE9B,OAAON,KAClBC,EAAQmC,EAAE9B,OAAOL,MACvB+B,GAAQ,SAAAK,GACJ,OAAO,eAAKA,EAAZ,eAAuB/B,EAASL,QAdH,EAiBE1D,mBAAS,6IAjBX,mBAiB9B+F,EAjB8B,KAiBfC,EAjBe,KAyCvC,OACE,yBAAKlH,UAAU,aACb,yBAAKA,UAAU,OACb,0BAAMA,UAAU,aAAaC,QAASN,EAAMwH,aAA5C,KACI,0BAAM/B,SApBQ,SAAO2B,GAAP,eAAAxJ,EAAAC,OAAA,mDAClBuJ,EAAE1B,iBACmB,8IAAlB4B,EAFe,uBAGdrJ,QAAQC,IAAI,2BAHE,iCAMZuJ,EAAW,CACb5F,UAAWkF,EAAQlF,UACnBC,SAAUiF,EAAQjF,SAClBE,MAAOsF,EACP1I,QAASoB,EAAMT,WAEnBtB,QAAQC,IAAqBuJ,GAZX,WAAA7J,EAAA,MAacmF,EAAgB/B,YAAYyG,IAb1C,cAclBzH,EAAMwH,cAdY,wCAqBd,2BAAOE,UAAU,IAAIC,UAAQ,EAAC/B,KAAK,OAAOZ,KAAK,YAAYC,MAAO8B,EAAQlF,UAAWgE,YAAY,sBAAsBF,SAAUwB,IACjI,2BAAOO,UAAU,IAAIC,UAAQ,EAAC/B,KAAK,OAAOZ,KAAK,WAAWC,MAAO8B,EAAQjF,SAAU+D,YAAY,qBAAqBF,SAAUwB,IAC9H,+BACQ,yBAAK9G,UAAW,cACZ,yBAAKA,UAAU,cAAc0B,IAAKuF,KAEtC,2BAAOM,QAAM,EAACjC,SAlCV,SAAMyB,GAAN,eAAAxJ,EAAAC,OAAA,uDAChBuJ,EAAEhC,UACF8B,GAAe,GAFC,WAAAtJ,EAAA,MAGEwI,EAAUgB,IAHZ,OAGVrJ,EAHU,OAIhBwJ,EAAcxJ,GACdmJ,GAAe,GALC,sCAkCiCtB,KAAK,UAElD,uCAAOA,KAAK,OAAOiC,SAAUZ,EAAajC,KAAK,eAAeC,MAAOjF,EAAMpB,SAA3E,gBACA,2CC1DL,SAASkJ,EAAT,GAAiC,IAAPzG,EAAM,EAANA,IAC7B,OAEI,4BACI,4BAAKA,EAAIQ,WACT,4BAAKR,EAAIS,UACT,wBAAIzB,UAAU,cAAa,yBAAK0B,IAAKV,EAAIW,MAAOC,IAAI,UAAU5B,UAAU,sBAAxE,KACA,4BACI,gCAAQ,yBAAK0B,IAAK,qHAClB,gCAAQ,yBAAKA,IAAK,6HCA3B,IAAMgG,EAAgB,SAAC,GAAmB,IAAjB3F,EAAgB,EAAhBA,UAC5B,OACI,oCACI,yBAAK/B,UAAU,gBACX,2BAAO2H,YAAY,IAAIC,YAAY,IAAIC,OAAO,KAC1C,+BACI,4BACI,0CACA,yCACA,6CACA,2CAKhB,yBAAK7H,UAAU,iBACX,2BAAO4H,YAAY,IAAID,YAAY,IAAIE,OAAO,KAC1C,+BACK9F,EAAUC,KAAI,SAAAhB,GAAG,OACd,kBAACyG,EAAD,CAAiBxF,IAAKjB,EAAI1B,IAAK0B,IAAKA,YCjBnD8G,EAAiB,SAACnI,GACbI,cAAd,IADqC,EAEOH,qBAAWjD,GAA/CkD,EAF6B,EAE7BA,cAF6B,KAEdwC,iBACiBnB,oBAAS,IAHZ,mBAG9B6G,EAH8B,KAGhBC,EAHgB,KAI/BC,EAAoB,WACtBD,GAAiBD,IALgB,EAOH7G,mBAAS,MAPN,mBAO9Ba,EAP8B,KAOnBO,EAPmB,KAmBrC,OAVAG,qBAAU,YACe,mBAAAlF,EAAAC,OAAA,mDACbqC,EADa,mEAAAtC,EAAA,MAECmF,EAAgB9B,yBAAyBf,EAAcwB,KAFxD,OAEX1D,EAFW,OAGjBC,QAAQC,IAAIF,EAAK,OACjB2E,EAAa3E,GAJI,qCAMrBgF,KACD,CAAC9C,IAECA,EAED,oCACKkI,GAAgB,kBAAC,EAAD,CAAkB7I,UAAWW,EAAcwB,GAAI9C,QAASsB,EAAc8E,KAAMwC,YAAac,IAC1G,yBAAKjI,UAAU,qBACX,yBAAK0B,IAAK7B,EAAcsD,QAG5B,4BAAQlD,QAASgI,GAAjB,qBACA,sDACClG,EAAY,kBAAC,EAAD,CAAeA,UAAWA,IAAgB,yCAVpC,4CCtBxB,SAASmG,EAAOvI,GAAQ,IACnBE,EAAkBD,qBAAWjD,GAA7BkD,cACR4C,qBAAU,cACR,CAAC5C,IAEcnB,IAAQ2F,IAAI,iBAC7B,OAEI,yBAAKrE,UAAU,UACX,kBAAC,IAAD,CAASmI,GAAI,KAAK,yBAAKzG,IAAK7B,EAAeA,EAAcsD,KAAM,wFAC9DtD,GAAiB,yBAAKG,UAAU,gBAAgBH,EAAc8E,MAC/D,yBAAK3E,UAAU,SACdH,GAAiB,kBAAC,IAAD,CAASuI,gBAAgB,SAASD,GAAI,WAAYE,OAAO,GAAzD,mBACbxI,GAAiB,kBAAC,IAAD,CAASuI,gBAAgB,SAASD,GAAI,UAAtC,UAChBtI,GAAiB,kBAAC,IAAD,CAASuI,gBAAgB,SAASD,GAAI,UAAtC,WACnB,kBAAC,IAAD,CAASC,gBAAgB,SAASD,GAAI,UAAtC,WCqBDG,MAjCf,WAAgB,IAAD,EAC6BpH,mBAAS,MADtC,mBACNrB,EADM,KACSwC,EADT,KAYb,OATAI,qBAAU,WACR,IAAI5C,GACAnB,IAAQ2F,IAAI,iBAAkB,CAChC,IAAMkE,EAAU7J,IAAQ2F,IAAI,iBAAiBmE,MAAM,GACnDnG,EAAiB7C,KAAKiJ,MAAMF,OAE7B,CAAC1I,IAIF,yBAAKG,UAAU,OACb,kBAAC,IAAD,KACE,kBAACrD,EAAe+L,SAAhB,CAAyB9D,MAAO,CAAE/E,gBAAewC,qBAC/C,kBAAC6F,EAAD,MACA,yBAAKlI,UAAU,WACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2I,KAAK,IAAIC,UAAWlJ,EAAM2I,OAAK,IACtC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWvF,IAChC,kBAAC,IAAD,CAAOsF,KAAK,SAASC,UAAWxG,IAChC,kBAAC,IAAD,CAAOuG,KAAK,WAAWC,UAAWd,UCvB1Be,QACW,cAA7B5K,OAAOC,SAAS4K,UAEe,UAA7B7K,OAAOC,SAAS4K,UAEhB7K,OAAOC,SAAS4K,SAASC,MACvB,2D,OCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFnG,SAASC,eAAe,SDyHpB,kBAAmBmG,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEtHnB,IAAMC,EAZN,SAAoBC,GAChB,IACI,OAAO3M,MAAQ,YAAK2M,IACtB,MAAOC,GACL,GAAI,qBAAuBA,EAAIC,KAC3B,MAAMC,MACF,wFAMEC,CAfEC,8CAAYC,aAAe,OAiB/CC,EAAOC,QAAUT,G,iBCjBjBQ,EAAOC,QAAU,CAChBpN,QAAS,0B,iBCDVmN,EAAOC,QAAU,CACbpN,QAAS,8C,wDCDb,IAAImF,EAAM,CACT,KAAM,GACN,QAAS,GACT,WAAY,GACZ,UAAW,GACX,aAAc,GACd,SAAU,GACV,YAAa,IAId,SAASkI,EAAeC,GACvB,IAAI9I,EAAK+I,EAAsBD,GAC/B,OAAOE,EAAoBhJ,GAE5B,SAAS+I,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEtI,EAAKmI,GAAM,CACpC,IAAIpD,EAAI,IAAI6C,MAAM,uBAAyBO,EAAM,KAEjD,MADApD,EAAE4C,KAAO,mBACH5C,EAEP,OAAO/E,EAAImI,GAEZD,EAAeK,KAAO,WACrB,OAAOC,OAAOD,KAAKvI,IAEpBkI,EAAeO,QAAUL,EACzBJ,EAAOC,QAAUC,EACjBA,EAAe7I,GAAK,K","file":"static/js/main.dbe7990e.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const CompanyContext = createContext(null)","import Axios from 'axios';\r\nconst { baseURL } = require('../config')\r\n\r\n\r\nconst API_URL = `${baseURL}/api/`\r\nconst axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\n// axios.defaults.withCredentials = true;\r\n\r\n\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${API_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n       \r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${API_URL}${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n            window.location.assign('/#/login');\r\n        }\r\n        else throw err;\r\n    }\r\n}","import httpService from './httpService'\r\nimport Cookies from 'js-cookie'\r\n\r\nexport default {\r\n    loginCompany,\r\n    logoutCompany,\r\n    signupCompany,\r\n    getCompanies,\r\n    getCompanyById,\r\n    removeCompany,\r\n    updateCompany\r\n}\r\n\r\nfunction getCompanies() {\r\n    return httpService.get('company')\r\n}\r\n//company\r\nfunction getCompanyById(companyId) {\r\n    return httpService.get(`company/${companyId}`)\r\n}\r\nfunction removeCompany(companyId) {\r\n    return httpService.delete(`company/${companyId}`)\r\n}\r\n\r\nfunction updateCompany(companyObj) {\r\n    return httpService.put(`company/edit/${companyObj._id}`, companyObj)\r\n}\r\n\r\nasync function loginCompany(loginCred) {\r\n    const company = await httpService.post('auth/login', loginCred)\r\n    return _handleLoginCompany(company)\r\n}\r\nasync function signupCompany(signupCred) {\r\n    const company = await httpService.post('auth/signup', signupCred)\r\n    return _handleLoginCompany(company)\r\n}\r\nasync function logoutCompany() {\r\n    await httpService.post('auth/logout');\r\n    Cookies.remove('loggedCompany')\r\n    sessionStorage.clear();\r\n}\r\nfunction _handleLoginCompany(company) {\r\n    sessionStorage.setItem('company', JSON.stringify(company))\r\n    return company;\r\n}","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyService from '../services/companyService';\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport Select from \"react-dropdown-select\";\r\n\r\n\r\n\r\nexport const Home = (props) => {\r\n  const { loggedCompany } = useContext(CompanyContext)\r\n  let history = useHistory();\r\n\r\n  const retrieveComps = async () => {\r\n    const comps = await companyService.getCompanies()\r\n    console.log(comps);\r\n  }\r\n\r\n  const onLogin = () => {\r\n    history.push('/login')\r\n  }\r\n\r\n  const onSignup = () => {\r\n    history.push('/login?newCompany=1')\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>Welcome to Presence Board</h1>\r\n        <h2>Here you can see who is prescense in a bit of a second</h2>\r\n      </div>\r\n      \r\n      <div className='cta-container'>\r\n        <div>\r\n          <h2>Your company is registered?</h2>\r\n          <button onClick={onLogin} >Log in now!</button>\r\n        </div>\r\n        <div>\r\n          <h2>New here? add your company</h2>\r\n          <button onClick={onSignup} >Register Now!</button>\r\n        </div>\r\n      </div>\r\n      <div>HELLO</div>\r\n      <button onClick={retrieveComps}>RETRIEVE</button>\r\n    </>\r\n  )\r\n}\r\n\r\n","import httpService from './httpService'\r\nimport Cookies from 'js-cookie'\r\n\r\nexport default {\r\n    getAllEmployees,\r\n    getEmployeeById,\r\n    removeEmployee,\r\n    updateEmployee,\r\n    addEmployee,\r\n    getAllEmployeesInCompany,\r\n    updateEmployeePresence\r\n}\r\n\r\nfunction getAllEmployees() {\r\n    return httpService.get('employee')\r\n}\r\n\r\nfunction getAllEmployeesInCompany(companyId){\r\n    return httpService.get(`employee/company/${companyId}`)\r\n}\r\n//employee\r\nfunction getEmployeeById(employeeId) {\r\n    return httpService.get(`employee/${employeeId}`)\r\n}\r\nfunction removeEmployee(employeeId) {\r\n    return httpService.delete(`employee/${employeeId}`)\r\n}\r\n\r\nfunction updateEmployee(employeeObj) {\r\n    return httpService.put(`employee/edit/${employeeObj._id}`, employeeObj)\r\n}\r\n\r\nfunction updateEmployeePresence(employeeId, isPresence){\r\n    console.log(employeeId, isPresence);\r\n    return httpService.put(`employee/presence` , {employeeId, isPresence})\r\n}\r\n\r\n\r\nasync function addEmployee(employeeObj) {\r\n    return await httpService.post('employee', employeeObj)\r\n}\r\n\r\n","import { Link } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport Hypnosis from \"react-cssfx-loading/lib/Hypnosis\";\r\n\r\nexport function BoardEmployeePreview({ emp, onChangePresence }) {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    // if (!emp.isPresence) return <></>\r\n\r\n    const onChangePresenceClick = async (employeeId) => {\r\n        // document.getElementById(`${employeeId}`).classList.toggle('gray')\r\n        console.log(\"HERE?\");\r\n        setIsLoading(true)\r\n        await onChangePresence(employeeId)\r\n        setIsLoading(false)\r\n    }\r\n    return (\r\n        <article id={`${emp._id}-card`} className=\"employee-card\" onClick={() => onChangePresenceClick(emp._id)}>\r\n            <div className='click-loader'>{isLoading && <Hypnosis width=\"100px\" height=\"100px\" />}</div>\r\n            <p>{emp.firstName + \" \" + emp.lastName}</p>\r\n            <img id={emp._id} src={emp.image} alt=\"profile\" className={[emp.isPresence ? \"color\" : \"gray\", \"employee-card-img\"].join(\" \")} />\r\n        </article>\r\n    )\r\n}","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyService from '../services/companyService';\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Select from \"react-dropdown-select\";\r\nimport employeeService from '../services/employeeService';\r\nimport { BoardEmployeePreview } from './BoardEmployeePreview';\r\n\r\n// import { EmployeePreview } from './EmployeePreview';\r\n\r\nexport const BoardEmployeeList = ({ employees, onChangePresence }) => {\r\n    return (\r\n        <>\r\n            <div className='employee-list'>\r\n                {employees.map(emp =>\r\n                    <BoardEmployeePreview onChangePresence= {onChangePresence} key={emp._id} emp={emp} />\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyService from '../services/companyService';\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport { Link } from 'react-router-dom'\r\nimport { BoardEmployeeList } from '../cmps/BoardEmployeeList';\r\n\r\nimport Select from \"react-dropdown-select\";\r\nimport employeeService from '../services/employeeService';\r\nimport io from 'socket.io-client'\r\nimport socketService from '../services/socketService';\r\nconst config = require('../config')\r\n\r\n\r\nconst baseURL = config.baseURL\r\n\r\nconst socket = io(baseURL)\r\n\r\n\r\n\r\nexport const Board = (props) => {\r\n  let history = useHistory();\r\n  const { loggedCompany, setLoggedCompany } = useContext(CompanyContext)\r\n  const [employees, setEmployees] = useState(null);\r\n  const [isDataChanged, setIsDataChanged] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getEmployees = async () => {\r\n      if (!loggedCompany) return\r\n      const res = await employeeService.getAllEmployeesInCompany(loggedCompany.id)\r\n      console.log(res, 'res');\r\n      setEmployees(res)\r\n      // socket.emit('board_page', loggedCompany.id)\r\n    }\r\n    getEmployees()\r\n  }, [loggedCompany, isDataChanged])\r\n\r\n  useEffect(() =>{\r\n    if (!loggedCompany) return\r\n    socket.emit('board_page', loggedCompany.id)\r\n  }, [socket, loggedCompany])\r\n\r\n  const onLogout = async () => {\r\n    await companyService.logoutCompany()\r\n    setLoggedCompany(null)\r\n    history.push('/')\r\n  }\r\n  const onChangePresence = async (employeeId) => {\r\n    console.log(employeeId);\r\n    try {\r\n      document.getElementById(`${employeeId}`).classList.toggle('gray')\r\n      const res = await employeeService.updateEmployeePresence(employeeId)\r\n      console.log(res)\r\n\r\n      await socket.emit('update_board', {companyId: loggedCompany.id, employeeId: employeeId})\r\n      \r\n      // document.getElementById(`${employeeId}-card`).classList.add('opacity')\r\n      // setIsDataChanged(!isDataChanged)\r\n      setTimeout(()=>setIsDataChanged(!isDataChanged), 1200)\r\n    } catch (err) {\r\n      //NEED TO HANDLE ERROR!!!\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const refreshBoard = async ({companyId, employeeId}) =>{\r\n    console.log(\"I NEED TO REFRESH\");\r\n    document.getElementById(`${employeeId}`).classList.toggle('gray')\r\n    // setTimeout((companyId)=>{\r\n      const res = await employeeService.getAllEmployeesInCompany(companyId)\r\n      console.log(res, 'res');\r\n      setEmployees(res)\r\n    // }, 1200)\r\n    // setIsDataChanged(!isDataChanged)\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on('update_board', ({companyId, employeeId}) => {\r\n        // console.log(chatId);\r\n        refreshBoard({companyId, employeeId})\r\n    })\r\n}, [socket])\r\n\r\n  if (!loggedCompany) return <div>Loading...</div>\r\n  return (\r\n    <><div>\r\n      <button onClick={onLogout}>Logout</button>\r\n    </div>\r\n      <img className='board-logo-img' src={loggedCompany.logo}></img>\r\n      <div className='board-container'>\r\n        {employees ? <BoardEmployeeList onChangePresence={onChangePresence} employees={employees} /> : <div>LOADING</div>}\r\n      </div>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\n","import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { CompanyContext } from '../contexts/CompanyContext.js';\r\nimport Select from \"react-dropdown-select\";\r\nimport companyService from '../services/companyService.js';\r\n\r\n\r\n\r\n\r\nexport const LoginSignup = (props) => {\r\n  let history = useHistory();\r\n  const { loggedCompany, setLoggedCompany } = useContext(CompanyContext)\r\n  if (loggedCompany) history.push('/board')\r\n\r\n\r\n  const signupButton = useRef(null)\r\n  const [companies, setCompanies] = useState(null)\r\n\r\n  const [msg, setMsg] = useState('')\r\n  const [loginCred, setLogin] = useState({ companyId: '', password: '' })\r\n  const [signupCred, setSignup] = useState({ companyName: '', password: '' })\r\n\r\n  useEffect(() => {\r\n    const signUpButton = document.getElementById('signUp');\r\n    const signInButton = document.getElementById('signIn');\r\n    const container = document.getElementById('container');\r\n\r\n    signUpButton.addEventListener('click', () => {\r\n      container.classList.add(\"right-panel-active\");\r\n    });\r\n\r\n    signInButton.addEventListener('click', () => {\r\n      container.classList.remove(\"right-panel-active\");\r\n    });\r\n\r\n    const searchQuery = new URLSearchParams(props.location.search);\r\n    if (searchQuery.get('newCompany')) signupButton.current.click()\r\n  }, [])\r\n\r\n  useEffect(() =>{\r\n    const getCompanies= async () => {\r\n      const res = await companyService.getCompanies()\r\n      const companiesMap = []\r\n      console.log(res);\r\n      res.forEach(company => {\r\n        companiesMap.push({label: company.name, value: company._id})\r\n      })\r\n      setCompanies(companiesMap)\r\n    }\r\n    getCompanies()\r\n  }, [])\r\n\r\n  const signupHandleChange = (ev) => {\r\n    ev.persist()\r\n    const field = ev.target.name\r\n    const value = ev.target.value\r\n    setSignup(prevSignup => ({ ...prevSignup, [field]: value }))\r\n  }\r\n  const loginHandleChange = (ev) => {\r\n    ev.persist()\r\n    const field = ev.target.name\r\n    const value = ev.target.value\r\n    setLogin(prevLogin => ({ ...prevLogin, [field]: value }))\r\n    console.log(loginCred);\r\n  }\r\n\r\n  const doLogin = async ev => {\r\n    ev.preventDefault()\r\n     console.log('doLogin');\r\n    const {companyId, password} = loginCred\r\n    console.log(loginCred);\r\n    if(!companyId || !password) return console.log('missing creds');\r\n    const company = await companyService.loginCompany({companyId: companyId, password})\r\n    setLoggedCompany(company)\r\n    console.log('signedupSucces');\r\n    // history.push('/')\r\n  }\r\n  const doSignup = async ev => {\r\n    ev.preventDefault()\r\n    console.log('check');\r\n    const {companyName, password} = signupCred\r\n    if(!companyName || !password) return console.log('missing creds');\r\n    const company = await companyService.signupCompany({name: companyName, password})\r\n    setLoggedCompany(company)\r\n    console.log('signedupSucces');\r\n    // history.push('/')\r\n  }\r\n\r\n  const onSelectCompany = (value) => {\r\n    const chosenCompany = value[0]\r\n    setLogin(prevLogin => ({ ...prevLogin, companyId: chosenCompany.value }))\r\n  }\r\n\r\n  return (\r\n    <div className='login-signup-page'>\r\n      <div className=\"container\" id=\"container\">\r\n        <div className=\"form-container sign-up-container\">\r\n          <form action=\"#\" onSubmit={doSignup}>\r\n            <h1>Create Account</h1>\r\n            <span>Enter your company's name</span>\r\n            <input name=\"companyName\" value={signupCred.companyName} onChange={signupHandleChange} type=\"text\" placeholder=\"Company Name\" />\r\n            <input name=\"password\" value={signupCred.password} onChange={signupHandleChange} type=\"password\" placeholder=\"Password\" />\r\n            <button>Sign Up</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"form-container sign-in-container\">\r\n          <form action=\"#\" onSubmit={doLogin}>\r\n            <h1>Sign in</h1>\r\n            <div className='selectCompany'>\r\n            <Select\r\n              options={companies}\r\n              values={loginCred.company}\r\n              onChange={(value) => onSelectCompany(value)}\r\n            />\r\n            </div>\r\n            <input name=\"password\" value={loginCred.password} onChange={loginHandleChange} type=\"password\" placeholder=\"Password\" />\r\n            {/* <a href=\"#\">Forgot your password?</a> */}\r\n            <button>Sign In</button>\r\n          </form>\r\n        </div>\r\n        <div className=\"overlay-container\">\r\n          <div className=\"overlay\">\r\n            <div className=\"overlay-panel overlay-left\">\r\n              <h1>Welcome Back!</h1>\r\n              <p>To see who is here, please login</p>\r\n              <button className=\"ghost\" id=\"signIn\">Sign In</button>\r\n            </div>\r\n            <div className=\"overlay-panel overlay-right\">\r\n              <h1>Hello, New Company!</h1>\r\n              <p>Enter your company's name and join us!</p>\r\n              <button ref={signupButton} className=\"ghost\" id=\"signUp\">Sign Up</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n","export async function uploadImg(ev) {\r\n    const CLOUD_NAME = \"echoshare\"\r\n    const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/auto/upload`\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', ev.target.files[0])\r\n    formData.append('upload_preset', 'echoshareImgs');\r\n    try {\r\n        const res = await fetch(UPLOAD_URL, {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n        const data = await res.json()\r\n        console.log(data);\r\n        return data.secure_url\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}","\r\nimport React, { useEffect, useState, useContext } from 'react';\r\nimport { uploadImg } from '../services/cloudinaryService';\r\nimport employeeService from '../services/employeeService';\r\n \r\nexport const NewEmployeePopup = props => {\r\n    const [empForm, setForm] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n\r\n        \r\n    })\r\n    const [isUploading, setIsUploading] = useState(false)\r\n\r\n    const handleChange = e => {\r\n        e.persist();\r\n        const target = e.target.name\r\n        const value = e.target.value\r\n        setForm(prevForm => {\r\n            return { ...prevForm, [target]: value }\r\n        })\r\n    }\r\n    const [primaryImgUrl, setPrimaryUrl] = useState('https://res.cloudinary.com/echoshare/image/upload/v1634132726/productImgs/799-7998561_add-photo-placeholder-north-luwu-regency_qb0eii.jpg')\r\n    const onUploadImg = async e => {\r\n        e.persist()\r\n        setIsUploading(true)\r\n        const url = await uploadImg(e)\r\n        setPrimaryUrl(url)\r\n        setIsUploading(false)\r\n    }\r\n    const onAddEmployee = async (e) =>{\r\n        e.preventDefault()\r\n        if(primaryImgUrl === 'https://res.cloudinary.com/echoshare/image/upload/v1634132726/productImgs/799-7998561_add-photo-placeholder-north-luwu-regency_qb0eii.jpg'){\r\n            console.log(\"You must upload a photo\");\r\n            return\r\n        }\r\n        const employee = {\r\n            firstName: empForm.firstName,\r\n            lastName: empForm.lastName,\r\n            image: primaryImgUrl,\r\n            company: props.companyId\r\n        }\r\n        console.log((\"Empl to add:\", employee));\r\n        const returnedEmployee  = await employeeService.addEmployee(employee)\r\n        props.handleClose()\r\n    }\r\n  return (\r\n    <div className=\"popup-box\">\r\n      <div className=\"box\">\r\n        <span className=\"close-icon\" onClick={props.handleClose}>x</span>\r\n            <form onSubmit={onAddEmployee}>\r\n            <input minLength=\"5\" required type='text' name='firstName' value={empForm.firstName} placeholder=\"Employee First Name\" onChange={handleChange} /> \r\n            <input minLength=\"5\" required type='text' name='lastName' value={empForm.lastName} placeholder=\"Employee Last Name\" onChange={handleChange} /> \r\n            <label>\r\n                    <div className={'img-upload'}>\r\n                        <img className='primary-img' src={primaryImgUrl} />\r\n                    </div>\r\n                    <input hidden onChange={onUploadImg} type=\"file\" />\r\n                </label>\r\n            <input type='text' disabled={isUploading} name='company-name' value={props.company} disabled />\r\n            <button>Add</button>\r\n            </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\n","import {Link} from 'react-router-dom'\r\nimport React from 'react'\r\nexport function EmployeePreview({emp}) {\r\n    return (\r\n        // <article className=\"employee-card\">\r\n        <tr>\r\n            <td>{emp.firstName}</td>\r\n            <td>{emp.lastName}</td>\r\n            <td className='image-cell'><img src={emp.image} alt=\"profile\" className=\"employee-card-img\"  /> </td>\r\n            <td>\r\n                <button><img src={'https://res.cloudinary.com/echoshare/image/upload/v1636982096/Edit_icon__the_Noun_Project_30184_.svg_lvvq3f.png'}></img></button>\r\n                <button><img src={'https://res.cloudinary.com/echoshare/image/upload/v1636983047/cross-in-circle-in-red-tom-hill-transparent_qohafi.png'}></img></button>\r\n                </td>\r\n        {/* <p className=\"product-card-name\">{emp.firstName}</p>\r\n        <p className=\"product-card-name\">{emp.lastName}</p>\r\n        <img src={emp.image} alt=\"profile\" className=\"employee-card-img\"  /> */}\r\n        </tr>\r\n    // </article>\r\n    )\r\n}","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyService from '../services/companyService';\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Select from \"react-dropdown-select\";\r\nimport employeeService from '../services/employeeService';\r\n\r\nimport { EmployeePreview } from './EmployeePreview';\r\n\r\nexport const EmployeesList = ({ employees }) => {\r\n    return (\r\n        <>\r\n            <div className='table-header'>\r\n                <table cellPadding='0' cellSpacing='0' border='0'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Profile Photo</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n            <div className='table-content'>\r\n                <table cellSpacing='0' cellPadding='0' border='0'>\r\n                    <tbody>\r\n                        {employees.map(emp =>\r\n                            <EmployeePreview key={emp._id} emp={emp} />\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyService from '../services/companyService';\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport {NewEmployeePopup} from '../cmps/NewEmployeePopup'\r\nimport { Link } from 'react-router-dom'\r\nimport employeeService from '../services/employeeService';\r\n\r\nimport Select from \"react-dropdown-select\";\r\nimport { EmployeesList } from '../cmps/EmployeesList';\r\n\r\n\r\n\r\nexport const CompanyProfile = (props) => {\r\n    let history = useHistory();\r\n    const { loggedCompany, setLoggedCompany } = useContext(CompanyContext)\r\n    const [isNewEmpOpen, setIsNewEmpOpen] = useState(false)\r\n    const toggleNewEmployee = () =>{\r\n        setIsNewEmpOpen(!isNewEmpOpen)\r\n    }\r\n    const [employees, setEmployees] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const getEmployees = async () => {\r\n            if(!loggedCompany) return\r\n            const res = await employeeService.getAllEmployeesInCompany(loggedCompany.id)\r\n            console.log(res, 'res');\r\n            setEmployees(res)\r\n        }\r\n        getEmployees()\r\n    }, [loggedCompany])\r\n\r\n    if (!loggedCompany) return <div>Loading...</div>\r\n    return (\r\n        <>\r\n            {isNewEmpOpen && <NewEmployeePopup companyId={loggedCompany.id} company={loggedCompany.name} handleClose={toggleNewEmployee}/>}\r\n            <div className='profile-container'>\r\n                <img src={loggedCompany.logo}></img>\r\n            </div>\r\n\r\n            <button onClick={toggleNewEmployee}> Add new Employee</button>\r\n            <button>Add Bulk Employees</button>\r\n            {employees ? <EmployeesList employees={employees} /> : <div>LOADING</div>  }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n// import { UserContext } from '../App'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { CompanyContext } from '../contexts/CompanyContext';\r\nimport Cookies from 'js-cookie'\r\nimport Hypnosis from 'react-cssfx-loading/lib/Hypnosis';\r\n\r\n// const userIcon = require('../assets/svgs/userIcon.svg')\r\n\r\nexport function Header(props) {\r\n    const { loggedCompany } = useContext(CompanyContext)\r\n    useEffect(() =>{\r\n    },[loggedCompany])\r\n    // if(!loggedCompany) return <Hypnosis />\r\n    const isLogged = Cookies.get('loggedCompany') ? 'logged' : ''\r\n    return (\r\n\r\n        <div className='header'>\r\n            <NavLink to={'/'}><img src={loggedCompany? loggedCompany.logo: \"https://res.cloudinary.com/echoshare/image/upload/v1636287815/echo_icon_q1hjeb.png\"} /></NavLink>\r\n            {loggedCompany && <div className='company-name'>{loggedCompany.name}</div>}\r\n            <div className='links'>\r\n            {loggedCompany && <NavLink activeClassName='active' to={'/company'} exact={true}>Company Profile</NavLink> }\r\n                {loggedCompany && <NavLink activeClassName='active' to={'/board'} >Board</NavLink>}\r\n                {!loggedCompany && <NavLink activeClassName='active' to={'/login'} >Sign In</NavLink>}\r\n                <NavLink activeClassName='active' to={'/about'} >About</NavLink>\r\n                {/* <NavLink activeClassName='active' to={'/about'} >About</NavLink>\r\n                <NavLink activeClassName='active' to={'/chat'} >Chat</NavLink>\r\n                <NavLink activeClassName='active' to={'/user'} > */}\r\n                {/* <div className='user-div'>\r\n                    {loggedUser? <img className={['userIcon', isLogged].join(' ')} src={loggedUser.profileImg} />  :\r\n                     <img className={['userIcon', isLogged].join(' ')} src={loggedUser?.profileImg || userIcon} /> }\r\n                    {loggedUser? <p style={{display: 'block' }}>Hello {loggedUser.username}</p> : null}\r\n                </div> */}\r\n                {/* </NavLink> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom'\r\nimport { CompanyContext } from './contexts/CompanyContext';\r\nimport {Home} from './pages/Home.js';\r\nimport {Board} from './pages/Board.js';\r\nimport { LoginSignup } from './pages/LoginSignup.js';\r\nimport { CompanyProfile } from './pages/CompanyProfile';\r\nimport { Header } from './cmps/Header';\r\nimport Cookies from 'js-cookie'\r\n\r\n\r\n\r\nfunction App() {\r\n  const [loggedCompany, setLoggedCompany] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (loggedCompany) return\r\n    if (Cookies.get('loggedCompany')) {\r\n      const jsonStr = Cookies.get('loggedCompany').slice(2)\r\n      setLoggedCompany(JSON.parse(jsonStr))\r\n    }\r\n  }, [loggedCompany])\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <CompanyContext.Provider value={{ loggedCompany, setLoggedCompany }}>\r\n          <Header />\r\n          <div className='content'>\r\n          <Switch>\r\n            <Route path=\"/\" component={Home} exact />\r\n            <Route path=\"/login\" component={LoginSignup} />\r\n            <Route path=\"/board\" component={Board} />\r\n            <Route path=\"/company\" component={CompanyProfile} />\r\n            {/* <Route path=\"/\" component={About} exact/> */}\r\n          </Switch>\r\n          </div>\r\n          {/* <Footer /> */}\r\n        </CompanyContext.Provider>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './assets/styles/global.scss'\r\n\r\nReactDOM.render(\r\n\r\n    <App />\r\n,\r\n  document.getElementById('root')\r\n)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const environment = process.env.ENVIRONMENT || 'dev'\r\n\r\n\r\nfunction tryRequire(environment) {\r\n    try {\r\n        return require(`./${environment}`);\r\n    } catch (err) {\r\n        if ('MODULE_NOT_FOUND' === err.code) {\r\n            throw Error(\r\n                'Incorrect ENVIRONMENT variable set, exiting\\nAllowed Environments:\\n1. dev\\n2. prod',\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst envConfig = tryRequire(environment);\r\n\r\nmodule.exports = envConfig;\r\n","module.exports = {\r\n\tbaseURL: \"http://localhost:4444\"\r\n}","module.exports = {\r\n    baseURL: 'https://presence-board-echo.herokuapp.com'\r\n}","var map = {\n\t\"./\": 21,\n\t\"./dev\": 48,\n\t\"./dev.js\": 48,\n\t\"./index\": 21,\n\t\"./index.js\": 21,\n\t\"./prod\": 49,\n\t\"./prod.js\": 49\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 90;"],"sourceRoot":""}